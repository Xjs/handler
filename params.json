{"tagline":"Java instrumentation for easy method routing","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Handler\r\n\r\nA java instrumentation library for easy method routing.\r\n\r\nIt's [MIT-licensed](https://raw.github.com/jatronizer/handler/master/LICENSE).\r\n\r\n## What does it do?\r\n\r\nIt applies the Handler Pattern - a Design Pattern made for tools. It instruments bytecode (a class seen as `[]byte`)\r\nThe Handler Pattern as supported by this library gives full control over a method's behavior in a class.\r\nIt is a design pattern designed for use with bytecode instrumentation.\r\nAn interface serves as a configuration file for the instrumentation.\r\n\r\n## How do I use it?\r\n\r\nYou only declare an interface and point the library at it.\r\n\r\n## What can I do with THAT?!?\r\n\r\nWhen this is applied, you are able to intercept, record, change, redirect or ignore method calls. What could this be used for? Some obvious choices - but only scratching the surface:\r\n * easy creation of mocks for any objects\r\n * lightweight / focused profilers\r\n * logging on method calls\r\n * opening up rigid and restricting libraries\r\n * ...\r\n\r\n## How... What?!?\r\n\r\nYou want to check how often a method `charToInt` is called on an instance of class `Caster`.\r\n\r\n```java\r\n\tpublic final class Caster {\r\n\t\tpublic Caster() {\r\n\t\t}\r\n\r\n\t\t// we want to instrument this method\r\n\t\tpublic int charToInt(char c) {\r\n\t\t\treturn (int) c;\r\n\t\t}\r\n\t}\r\n```\r\n\r\nTo measure the number of calls to `charToInt` with the Handler Pattern, you create an interface `CharToIntHandler`\r\n\r\n```java\r\n\tpublic interface CharToIntHandler {\r\n\t\t// the new version of our method\r\n\t\tint charToInt(CharToIntHandler handler, char c);\r\n\r\n\t\t// we need this to set our Handler, HandlerInstrumentation will create this\r\n\t\tvoid setCharToIntHandler(CharToIntHandler handler);\r\n\t}\r\n```\r\n\r\n`HandlerInjector` injects `CharToIntHandler` into `Caster` and reroutes the method calls. `Caster` now becomes\r\n\r\n```java\r\n\tpublic final class Caster implements CharToIntHandler {\r\n\t    // where the Handler is stored\r\n\t\tprivate CharToIntHandler charToIntHandler;\r\n\r\n\t\tpublic Caster() {\r\n\t\t\t// set to this at initialization so we can safely call methods\r\n\t\t\tcharToIntHandler = this;\r\n\t\t}\r\n\r\n\t\t// the original version with a changed signature\r\n\t\tpublic int charToInt(CharToIntHandler handler, char c) {\r\n\t\t\treturn (int) c;\r\n\t\t}\r\n\r\n\t\t// all calls end up here and are rerouted to the Handler\r\n\t\tpublic int charToInt(char c) {\r\n\t\t\treturn charToIntHandler.charToInt(this, c);\r\n\t\t}\r\n\r\n\t\t// we need this to set the Handler without reflection (casting only)\r\n\t\tpublic CharToIntHandler setCharToIntHandler(CharToIntHandler charToIntHandler) {\r\n\t\t\tthis.charToIntHandler = charToIntHandler == null ? this : charToIntHandler;\r\n\t\t}\r\n\t}\r\n```\r\n\r\nNow every instance of `Caster` is castable to `CharToIntHandler` at runtime. Given this `CharToIntHandler` (not thread-safe, but that's up to you)\r\n\r\n```java\r\n\tpublic class CallCounter implements CharToIntHandler {\r\n\t\tprivate int calls = 0;\r\n\r\n\t\tpublic int getCallCount() {\r\n\t\t\treturn calls;\r\n\t\t}\r\n\r\n\t\tpublic int charToInt(CharToIntHandler handlee, char c) {\r\n\t\t\tcalls++;\r\n\t\t\treturn handlee.charToInt(null, c);\r\n\t\t}\r\n\r\n\t\tpublic void setCharToIntHandler(CharToIntHandler handler) {\r\n\t\t\t// this will never get called on a handler, it's for the handlee\r\n\t\t\tthrow new UnsupportedOperationException(\"you can't handle this!\");\r\n\t\t}\r\n\t}\r\n```\r\n\r\nYou can get the number of charToInt calls your Caster instance receives:\r\n\r\n```java\r\nCaster caster = new Caster();\r\nCallCounter counter = new CallCounter();\r\ncaster.charToInt(0);\r\nassertTrue(counter.getCallCount() == 0);\r\n((CharToIntHandler) caster).setCharToIntHandler(counter);\r\ncaster.charToInt(0);\r\nassertTrue(counter.getCallCount() == 1);\r\ncaster.charToInt(0);\r\nassertTrue(counter.getCallCount() == 2);\r\n```","name":"Handler","google":""}